Autoloading
===========

The autoloading of the legacy application is done from the ``boot`` method of the legacy
kernel, called by the ``LegacyBooterListener``.

There are many ways to autoload a PHP project. The legacy project can be autoloaded:
 * requiring a PHP file
 * instantiating the main class of the framework
 * using composer
 * ...

Regardless the way the legacy code is autoloaded, you will have to do it by yourself.
To do so you will have to create a ``class loader`` which must implement the
``LegacyClassLoaderInterface``:

::

    namespace Acme\MyLegacyBundle\Autoload;

    use Theodo\Evolution\Bundle\LegacyWrapperBundle\Autoload\LegacyKernelInterface;

    class MyLegacyClassLoader implements LegacyClassLoaderInterface
    {
        /**
         * @var LegacyKernelInterface
         */
        private $kernel;

        /**
         * {@inheritdoc}
         */
        public function autoload()
        {
            // require the legacy autoload php file.
            require_once $this->kernel->getRootDir().'/autoload.php';

            $this->isAutoloaded = true;
        }

        /**
         * {@inheritdoc}
         */
        public function isAutoloaded()
        {
            return $this->isAutoloaded;
        }

        /**
         * {@inheritdoc}
         */
        public function setKernel(LegacyKernelInterface $kernel)
        {
            $this->kernel = $kernel;
        }
    }

Declare this class as a service:

::

    <parameters>
        <parameter key="my_legacy.autoload.my_legacy_class_loader.class">Acme\MyLegacyBundle\Autoload\MyLegacyClassLoader</parameter>
    </parameters>

    <services>
        <service id="my_legacy.autoload.my_legacy_class_loader" class="%my_legacy.autoload.my_legacy_class_loader.class%">
        </service>
    </services>

Then you will have to configure the bundle to use your class loader service:

::

    theodo_evolution_legacy_wrapper:
        # ...
        class_loader_id: my_legacy.autoload.my_legacy_class_loader

Legacy with Composer
====================

If you are lucky, the legacy project could use Composer. This will ease your work a lot.
The bundle provides you a way to use Composer from the legacy kernel.

First your AppKernel must extends the ``EvolutionKernel``:

::

    use Theodo\Evolution\Bundle\LegacyWrapperBundle\HttpKernel\EvolutionKernel;

    class AppKernel extends EvolutionKernel
    {
        // ...
    }

Then make sure to set the ``loader`` to the kernel from the front controller ``web/app.php``,
``web/app_dev.php`` and ``app/console``:

::

    // ...
    $loader = require_once __DIR__.'/../app/bootstrap.php.cache';

    // ...

    $kernel = new AppKernel('dev', true);
    $kernel->setLoader($loader);

Your class loader service must implement the ``ComposerLoaderAwareInterface``
to inject the autoloader provided by Composer in it.

::

    class MyLegacyClassLoader implements LegacyClassLoaderInterface, ComposerLoaderAwareInterface
    {
        // ... other properties

        /**
         * @var ClassLoader
         */
        private $loader;

        // ... other methods

        /**
         * @param ClassLoader $loader
         * @return mixed
         */
        public function setLoader(ClassLoader $loader)
        {
            $this->loader = $loader;
        }
    }

Don't forget to change the service definition and add the ``loader_aware`` tag:

::

    <parameters>
        <parameter key="my_legacy.autoload.my_legacy_class_loader.class">Acme\MyLegacyBundle\Autoload\MyLegacyClassLoader</parameter>
    </parameters>

    <services>
        <service id="my_legacy.autoload.my_legacy_class_loader" class="%my_legacy.autoload.my_legacy_class_loader.class%">
            <tag name="loader_aware" />
        </service>
    </services>

Finally, you can use the ``autoload`` generated by Composer from the legacy application and remove, add some classes or library:

::

    /**
     * {@inheritdoc}
     */
    public function autoload()
    {
        $composerDir = realpath($this->legacyPath.'/lib/vendor/composer');

        $map = require $composerDir . '/autoload_namespaces.php';
        $prefixes = $this->loader->getPrefixes();
        foreach ($map as $namespace => $path) {
            if (!array_key_exists($namespace, $prefixes)) {
                $this->loader->set($namespace, $path);
            }
        }

        $classMap = require $composerDir . '/autoload_classmap.php';
        if ($classMap) {
            $this->loader->addClassMap($classMap);
        }

        $includeFiles = require $composerDir . '/autoload_files.php';
        foreach ($includeFiles as $file) {
            // Don't autoload the legacy SwiftMailer as it is autoloaded with the SwiftMailerBundle
            if (false === strpos($file, 'swiftmailer')) {
                require $file;
            }
        }
    }
